<html>
<head>

<style type="text/css">
@import url(/css/main.css);
@import url(/css/overhead.css);
@import url(/css/themes/smoothness/jquery-ui-1.7.2.custom.css);
</style>
<script src="/js/jquery-1.3.2.js" type="text/javascript"></script>
<script src="/js/ui.core.js" type="text/javascript"></script>
<script src="/js/ui.draggable.js" type="text/javascript"></script>
<script src="/js/ui.droppable.js" type="text/javascript"></script>
<script src="/js/ui.resizable.js" type="text/javascript"></script>
<script src="/js/ui.dialog.js" type="text/javascript"></script>
<script type="text/javascript">
// Do something better than this for determinging logged in user...
var logged_in_user = '{{ logged_in_user }}';

var collaborators = '{{collaborators}}';

var notes = {};
// Data structure for existing notes
{% for existing_bookmark_note in notes %}
notes['{{ existing_bookmark_note.key }}'] = {
    user: '{{ existing_bookmark_note.user }}',
    text: '{{ existing_bookmark_note.note_as_one_line|escape }}',
    created: '{{ existing_bookmark_note.created }}',
    modified: '{{ existing_bookmark_note.local_modified|date:"M d, f:sA T" }}',
    width: {{ existing_bookmark_note.width }},
    height: {{ existing_bookmark_note.height }},
    top: {{ existing_bookmark_note.top }},
    left: {{ existing_bookmark_note.left }},
    key: '{{ existing_bookmark_note.key }}',
    type: 'note'
};
{% endfor %}

var months = [
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
];

function zero_pad(s) {
    return s < 10 ? "0" + s : s;
}

// From http://happygiraffe.net/blog/2007/09/26/jquery-logging/
jQuery.fn.log = function(msg) {
    console.log("%s: %o", msg, this);
    return this;
};


// True if note_data obj has temp timestamp key
function is_note_unsaved(note_data) {
    return note_data.key.search(/^\d+$/) != -1;
}

function displayable_update_time() {
    var today = new Date();
    var d = zero_pad(today.getDate());
    var h = today.getHours();
    var m = zero_pad(today.getMinutes());
    var s = zero_pad(today.getSeconds());
    var tz = today.getTimezoneOffset() > 240 ? 'EST' : 'EDT';
    var ampm = h < 12 ? 'AM' : 'PM';
    var hr12 = h % 12;
    return months[today.getMonth()] + " " + d + ", " + (hr12 == 0 ? 12 : hr12) + ":" + m + ":" + s + "" + ampm + ' ' + tz;
}

function display_note(note_data) {

    if (note_data.type != 'note') {
        // Default note when adding a new one
        note_data = {
            user: '{{ logged_in_user }}',
            text: '',
            modified: displayable_update_time(),
            height: 150,
            width: 240,
            left:  8,
            top: 100,
            key: null
        };
    }
    var note = $('<div class="Note">');
    if (note_data.key == null) {
        // New, unsaved note
        var temp_id = ''+new Date().getTime();
        note_data.key = temp_id;
        notes[temp_id] = note_data;
    }

    // Cross reference note html divs and raw note data
    note_data['note_div'] = note;
    note.data('note_data', note_data);

    note.dialog(
        {
            autoOpen: false,
            title: note_data.user + '<br/>' + note_data.modified,
            width: note_data.width,
            height: note_data.height,
            position: [ note_data.left, note_data.top ]
        }
    );
    // Only note creators can edit or delete notes
    if (note_data.user == logged_in_user) {
        note.append($('<textarea></textarea>').append(note_data.text));
        note.dialog('option', 'buttons', { 'Save' : save_note });
        note.bind('dialogclose', delete_note);
    } else {
        // Remove x when a dialog that isn't ours is opened
        note.bind('dialogopen', function() { $(this).parents(".ui-dialog:first").find(".ui-dialog-titlebar-close").remove(); });
        note.append($('<textarea></textarea>').attr('disabled', 'disabled').css('border', '0').css('background', '#fff').append(note_data.text));
    }
    note.dialog('open');
}

// runs when note is closed. if previously saved it is deleted.
function delete_note(e) {
    var note = $(e.target);
    var note_key = note.data('note_data').key
    if (note_key.search(/^\d+$/) != -1) {
        return; // note hasn't been saved so just close it
    }
    var note_url = "/{{ user }}/overheads/{{ page }}/notes/" + note_key;
    $.post(
        note_url,
        { 'delete': 'true' },
        function(data, textStatus) {
            if (textStatus == "success") {
                // Show something to the user?
                //alert('Note deleted');
            } else {
                alert('Note not saved: ' + textStatus);
            }
        }
    );
}

function save_note() {
    // Make ajax call to save the note
    var note = $(this);
    var note_dialog = note.parent();
    var offset = note_dialog.offset();
    var oLeft = offset.left;
    var oTop = offset.top;
    var height = note_dialog.height();
    var width = note_dialog.width();
    var text = note.children('textarea').get(0).value;
    var note_url = "/{{ user }}/overheads/{{ page }}/notes";
    var note_key = note.data('note_data').key;
    if (note_key.search(/^\d+$/) == -1) {
        note_url += '/' + note.data('note_data').key;
    }
    // for testing
    //note.children('textarea').get(0).value = text + '\n' + oLeft + ' ' + oTop + '\n' + height + ' ' + width;
    $.post(
        note_url,
        { note_text : text, note_height : height, note_width : width, note_left : oLeft, note_top : oTop},
        function(data, textStatus) {
            if (textStatus == "success") {
                // TODO ??? Use something safer that only converts JSON see http://www.json.org/js.html.
                data = eval('(' + data + ')');
                // Update notes title to include new update time
                var title = note.dialog('option', 'title').split('<br/>');
                note.dialog('option', 'title', title[0] + '<br/>' + displayable_update_time());

                // Grab existing note_data obj
                var note_data = note.data('note_data');

                // Remove previous unsaved note from notes container
                delete notes[note_data.key];

                // Update key val to new key and re-attach to note and notes container
                note_data.key = data.key;
                note.data('notes_data', note_data);
                notes[note_data.key] = note_data;

            } else {
                alert('Note not saved: ' + textStatus);
            }
        }
    );
}

function save_collaborators() {
    var collaborator_div = $(this);
    var text = collaborator_div.children('textarea').get(0).value;
    collaborators = text;
    var post_url = "/{{ user }}/overheads/{{ page }}/collaborators";
    $.post(
        post_url,
        { collaborators: text },
        function(data, textStatus) {
            if (textStatus == 'success') {
                // TODO Show the user that something actually happened
                data = eval('(' + data + ')');
            } else {
                alert('Collaborators not saved: ' + textStatus);
            }
        }
    );
}

function remove_note(note_data) {
    var note = note_data.note_div;
    note.dialog('destroy');
    note.remove();
    delete notes[note_data.key];
}

function add_note(note_data) {
    display_note(note_data);
    notes[note_data.key] = note_data;
}

function note_poller() {
    $.get(
        '/{{ user }}/overheads/{{ page }}/notes',
        {},
        function(data, textStatus) {
            if (textStatus == 'success') {
                // deletions
                for (var note_key in notes) {
                    if (data[note_key] == undefined) {
                        // Don't remove notes that haven't been saved
                        var note_data = notes[note_key];
                        if (!is_note_unsaved(note_data)) {
                            remove_note(note_data);
                        }
                    }
                }
                // additions/updates
                for (var note_key in data) {
                    if (notes[note_key] == undefined) {
                        add_note(data[note_key]);
                    } else {
                        // update text and title of possibly updated notes that aren't ours
                        var note_data = notes[note_key];
                        if (note_data.user != logged_in_user) {
                            if (data[note_key].modified != note_data.modified) {
                                var new_note_data = data[note_key];
                                note_data.note_div.dialog('option', 'title', note_data.user + '<br/>' + new_note_data.modified);
                                note_data.note_div.dialog('option', 'position', [ new_note_data.left, new_note_data.top ]);
                                note_data.note_div.dialog('option', 'height', new_note_data.height);
                                note_data.note_div.dialog('option', 'width', new_note_data.width);
                                note_data.note_div.children('textarea').get(0).value = new_note_data.text;
                            }
                        }
                    }
                }
            } else {
                $().log('Problem getting note updates from server, reason: ' + textStatus);
            }
       },
       'json'
    );
}
// TODO ??? Move some of this to external script
$(document).ready(function() {

    for (var note_key in notes) {
        display_note(notes[note_key]);
    }

    $('#add-note').click(display_note);
    $('#manage-collaborators').click(
        function() {
            var button = $(this);
            var offset = button.offset();
            $('<div>')
                .append('<p>Enter email addressess of people you\'d like to collaborate with on this overhead.</p>')
                .append($('<textarea></textarea>').text(collaborators).height(150))
                .dialog(
                    {
                        title: 'Collaborators',
                        position: [ offset.left, offset.top ],
                        width: 400,
                        height: 300,
                        buttons: { 'Save': save_collaborators }
                    }
                );
        }
    );

    // poll server looking for note adds/removals.
    // DOM is updated accordingly.
    setInterval('note_poller();', 60000);
});
</script>
</head>
<body>

<div id="menu-bar">
<div id='controls'>
<form method="post" action="/{{ user }}/overheads/{{ page|urlencode }}">
<input id="add-note" type="button" value="Add Note"/>

{% ifequal user logged_in_user %}
<input id="manage-collaborators" type="button" value="Manage Collaborators"/>
tags <input type="text" size="30" name="tags" value="{{ tags }}" />
<input type="checkbox" value="public" name="access" {% ifequal access "public" %}checked="checked"{% endifequal %} />world viewable?
<input type="submit" value="Save"/>
{% endifequal %}

</form>
Go to <a href="http://{{ page }}">{{ page }}</a>
</div>

<div id='user'>
{{ logged_in_user }} | <a href="{{logout_url}}">logout</a>
</div>

<div style="clear:both"></div>
</div>

<div style="clear:both">&nbsp;</div>

<iframe width="100%" height="100%" src="http://{{ page }}"
border="0" noborder="noborder" frameborder="0" padding="0" spacing="0"></iframe>


</body>
</html>
